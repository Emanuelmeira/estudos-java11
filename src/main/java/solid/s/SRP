
REF: http://codebetter.com/karlseguin/2008/12/05/get-solid-single-responsibility-principle/
     https://www.eduardopires.net.br/2013/05/single-responsibility-principle-srp/
     https://medium.com/contexto-delimitado/o-princ%C3%ADpio-da-responsabilidade-%C3%BAnica-4a77dee3b590

- SOLID – Single Responsibility Principle – SRP

Este é o primeiro princípio do SOLID, um dos mais fáceis de entender e de aplicar.

“Uma classe deve ter um, e apenas um, motivo para ser modificada”

Se uma classe só deve ter um motivo para ser modificada, certamente ela só deve ter uma única responsabilidade, logo:
Cada responsabilidade deve ser uma classe, porque uma responsabilidade é um eixo de mudança.

Para resolver o problema do acoplamento, o Princípio da Responsabilidade Única sugere uma abordagem que propicie a coesão:
""Reúna as coisas que mudam pelas mesmas razões. Separe as coisas que mudam por diferentes motivos"".

Veja esta classe:
public class DebitoContaCorrente
{
    public void ValidarSaldo(int valor) { }

    public void DebitarConta(int valor) { }

    public void EmitirComprovante() { }
}

O que esta classe faz?

Esta classe valida saldo em conta e debita valor da conta e emite comprovante.
Esta classe possui três responsabilidades, ou seja, ela tem três razões para ser modificada, problemas a vista, vamos imaginar que por algum motivo a
regra de negócio da emissão de comprovante mudou, logo para aplicar a nova regra seria necessário modificar a classe DebitoContaCorrente.
Se por um acaso na modificação da classe algum bug não identificado foi para a produção não apenas a emissão de comprovante, mas sim todas as
funcionalidades da classe poderiam estar comprometidas. O sistema deixaria de fazer o débito devido um problema com o comprovante.

Esse é apenas um exemplo de como o acoplamento pode trazer problemas, testes de unidade seriam muito mais complexos de serem desenvolvidos (e menos eficazes).
Ao modificar esta classe vários testes de integração necessitariam ser executados para garantir que uma funcionalidade não comprometeu as demais.

Alguns benefícios do Single Responsibility Principle:

Complexidade do código reduzida, mais explícita e direta;
Facilitação da legibilidade;
Redução de acoplamento;
Código limpo e testável;
Facilidade de evolução.

Como deveria ser:
Veja como a classe poderia ficar após um refactoring de aplicação do Single Responsibility Principle:

public class DebitoContaCorrente
{
    public void DebitarConta(int valor) { }
}

public class SaldoContaCorrente
{
    public void ValidarSaldo(int valor) { }
}

public class ComprovanteContaCorrente
{
    public void EmitirComprovante() { }
}

Cada classe com sua responsabilidade.
No início isso pode parecer exagero, mas não é, isto é uma promoção da qualidade do código e uma ótima maneira de obter os benefícios citados acima.

Conclusão

O Single Responsibility Principle é um dos mais importantes princípios do SOLID, deve ser aplicado para obtermos classes mais coesas e de baixo acoplamento.

Este é o tipo de princípio que todo código orientado a objetos deveria possuir.
Portanto antes de construir aquela classe que cadastra o usuário e envia o e-mail, lembre-se deste princípio.